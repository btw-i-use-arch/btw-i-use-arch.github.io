<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Marcel Schramm</title>
    <link>https://btw-i-use-arch.github.io</link>
    <description>thoughts on random topics, but mostly tech</description>
    <managingEditor>marcelschr@protonmail.com (Marcel Schramm)</managingEditor>
    <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
    <item>
      <title>Introducing My New And Worse Website</title>
      <link>https:/btw-i-use-arch.github.io/articles/introducing-my-new-and-worse-website.html</link>
      <description></description>
      <content:encoded><![CDATA[<p>Introductory content.</p>

<p>Actual content</p>]]></content:encoded>
      <author>Marcel Schramm</author>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Think Twice Before Using Varargs</title>
      <link>https:/btw-i-use-arch.github.io/articles/think-twice-before-using-varargs.html</link>
      <description></description>
      <content:encoded><![CDATA[<p>Varargs, which is short for
<a href="https://en.wikipedia.org/wiki/Variadic_function">variadic arguments</a>,
are a pretty cool thing. They allow your functions to take from 0 to n
arguments, the amount of possible function arguments might differ from
language to language though. Most of you have probably already used a
function which makes use of varargs. Throughout this blog post, I am gonna
use Java for examples.</p>

<p>As an example, let's look at <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#format(java.lang.String,%20java.lang.Object...">String.format(String, Object...)</a>:</p>

<code><pre>
String name = "Marcel"
String.format("Hello %s.%nThe weather is quite good today.", name);
</pre></code>

<p>The resulting String would look like this:</p>

<samp><pre>
Hello Marcel.
The weather is quite good today.
</pre></samp>

<p>We could also use the function to just add a line break, but pass no additional
variables:</p>

<code><pre>
String name = "Marcel"
String.format("Hello.%nThe weather is quite good today.");
</pre></code>

<p>This would still compile, since varargs allow from 0 to n arguments, which
is totally fine for our use case though.</p>

<p>But let's look at a more dangerous example:</p>

<code><pre>
class Screamer {
    /**
     * Screams each passed word onto a new line.
     *
     * @params words are the things to be screamed
     */
    void screamWords(String... words) {
        for( String word: words ) {
            System.out.println("Scream: " + words.toUpperCase());
        }
    }
}

class IntenseScreamer extends Screamer{
    @Override
    void screamWords(String... words) {
        //Intensify the words by adding exclamation marks!
        for( int index = 0; index &lt; words.length; index++ ) {
            words[index] = words[index] + "!!!";
        }

        super.screamWords();
    }
}
</pre></code>

<p>In case you haven't noticed the error, I forgot passing the words to the
supercall. That happens quite easy, since it allows 0 arguments as well.
In such case, an empty array will be passed, since varargs are nothing but
arrays under the hood.</p>

<p>I am not telling you to avoid varargs completely, but sometimes you might just
want to use an array, as it will give you some compile-time safety, since you
have to at least pass an empty array.</p>

<p>In my opinion, you should avoid using varargs if you could potentially pass
an incorrect amount of values, since there can not be any compile-time checking
without using third party tools.</p>

<p>This actually happened to me at work, which is why I bring it up. I wasted a
while before I found the problem, since I didn't check every place where the
parameters were passed on. I just knew that nobody mutates them and I knew
that they were passed correctly in the beginning, so why the hell was I
getting an empty array.</p>

<b>EDIT:</b>

<p>A colleague pointed out that it might annoy some people to always create arrays,
which is kind of the reason why varargs are so nice to use. A possible solution
to that problem would be a mandatory parameter followed by a vararg parameter of
the same type.</p>

<p>Here is an example:</p>

<code><pre>
//Defining your method
void hello(String nameOne, String... restOfNames) {
    String names[] = new String[restOfNames.length + 1];
    names[0] = nameOne;
    System.arraycopy(restOfNames, 0, names, 1, restOfNames.length);

    //Implementation...
}

//Calling it
hello("Marcel", "Jeff", "John");
</pre></code>

As you can see, this requires some additional logic, but it would usage wise be
the same for the methodcaller, unless the intention was to actually pass a
complete array, in that case the caller would have to create a new smaller array
and pass the first cell of the old array as the first parameter. This would also
be worse performance wise, even though this would usually not be critical.]]></content:encoded>
      <author>Marcel Schramm</author>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Why do people expect software to be for free?</title>
      <link>https:/btw-i-use-arch.github.io/articles/why-do-people-expect-software-to-be-for-free.html</link>
      <description></description>
      <content:encoded><![CDATA[<p>
Recently I have been wondering why everyone seems to expect software
to be free. Free software has existed for quite a while, but
many people have started to expect software to be free by default.
</p>

<p>
I assume that many people think that the software they use
in their daily life is already free. Let's take Facebook as an example.
Do you think Facebook is free? Yes, it is free to use, however, this doesn't
mean that you aren't paying in a way. When using Facebook you are paying
with your personal data and you are probably seeing ads, unless you are
using an ad-blocker. By the way, even some ad-blockers aren't completely
free, some actually mine data or only block ads that they aren't paid for.
The same goes for other free-to-use software that you use.
</p>

<p>
<em>
In case you are interested in using an ad-blocker, I suggest you take
at look at <a href="https://github.com/gorhill/uBlock)">UBlock Origin</a>.
</em>
</p>

<p>
Okay, so what do we pay for? We pay for games, right? Buying a AAA game
for 60€ still seems to be accepted by most gamers. However, would they buy
a 5€ game for their smartphone? Unlikely. I have noticed that many people
seem to expect smartphone apps to be free (subsidized by ads) or extremly
cheap. Why do many people deem 5€ for a smartphone application to be much?
I assume this is due to the fact that smartphone apps feel
more like a "side thing" that you just use in order to keep the boredom away.
There are also apps that don't focus on entertainment. As far as I know,
those kind of apps are less used by the average smartphone user though.
</p>

<p>
Do I pay for mobile applications? No, not really, the only app I have ever bought
was Teamspeak 3 and I refunded it, since it was terrible. However, I do not like
to use applications that are subsidized by advertisements, because I believe that
the advertisement model is completely broken. Applications that implement an
advertisement model often decrease in user experience. Either by showing popups,
using up the space on your screen or even adding trash to your devices system.
I generally believe the way that most advertisements are made today, is very
dishonest. Whenever seeing an advertisement on the TV, I feel like I am being
lied to.
</p>

<p>
In order to avoid such subsidation models, I try to use as much truly
<b>free software</b> as possible, also referred to as <b>free open source software</b>.
However, people should be paid for the work they do, right?
</p>

<p>
Yes, everyone should be paid for the work they do, at least I believe so.
So, what can you do?
I suggest you start to try using more free open source software and if you
like what you are getting, drop a donation from time to time, it really helps!
Some software projects are actually completely subsidized by donations, for
example an operating system called <a href="https://elementary.io/de/">Elementary OS</a>.
It has adopted the `pay what you want` model, meaning that if you want to, you
can just not pay anything. The system also has a software store that allows you
to optionally pay for anything that you install via the store. Such principles
are viable and are being used, however, most companies still try to maximize
their outcome by any chance and therefore such things will unlikely ever be
adopted by big companies.
</p>

<p>
Another good payment model is the one that <a href="https://play.euw.leagueoflegends.com/">League of Legends</a> is using.
You can download and play the game for free, however, you can still
purchase ingame items in exchange for real money. Those ingame items
don't provide the player any advantages over the other players, since
they are only visual items. Those items can be skins for characters
or emoticons and ward-skins. League of Legends has been doing it this way
for a long time now and it seems to work just fine.
</p>

<p>
<b>EDIT: Someone just pointed out that you could also buy
champions(playable characters). In the beginning you only have a specific
set of characters. Until season 6 or 7 it was quite hard to get many
characters in a short amount of time. At a certain point they made it
much easier though.</b>
</p>

<p>
So, what's the point of this post? I'd like to encourage you to start paying for
software. I assume just like me, many of you are annoyed by advertisements,
especially looking at mobile aplications and websites. If more people were to
pay for software and media, then less companies would decide to start
build their products around an advertisement model. I am not telling you that
you have to use free open source software
though, that's just my opinion. However, think about paying for what you use,
because just like the machine that you use for reading this post, someone
had to produce that software.
</p>

<p>
Food for thought: Why do you think that no one expects physical goods or
services should be free?    
</p>]]></content:encoded>
      <author>Marcel Schramm</author>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A Month Into Solus Budgie</title>
      <link>https:/btw-i-use-arch.github.io/articles/back-to-linux.html</link>
      <description></description>
      <content:encoded><![CDATA[<p>A while ago I decided to start abandoning proprietary services, one of those was windows.<p>

<h2>Backstory</h2>

<p>The first Linux I had ever seen and actively used was <q>open SUSE</q> in 2011 I believe, I was about 13 years old at that time.</p>

<p>I was just a "normal" user and solely used it to play games and surf the web.
At some point I stopped using SUSE ... I forgot why, but probably due to me being too stupid to achieve what I wanted to achieve.
I then switched to <q>Windows 7</q> and used it for about 3 to 4 years and then decided to get <a href="https://www.ubuntu.com/">Ubuntu</a>, at that
point and time I had to abandon all the games that I had played on windows.
I missed my games and switched back to windows 7 after about 3 months.
As soon as Windows 10 was available I did the free upgrade and was quite satisfied, since Windows 10 fixed a lot of the quirks that Windows 7 had:</p>

<ul>
<li>Flat Design</li>
<li>Multiple workspaces (desktops)</li>
<li>windows snapping with proper multi monitor support</li>
<li>It was faster</li>
<li>more ... (I am too lazy to list more)</li>
</ul>

<p>on the other hand it introduced some annoying stuff, like <q>builtin advertisements</q> in the startmenu, <q>preinstalled bloatware</q>, <q>annoying popups</q> and <q>additional telemetry</q> that you can't easily disable.
Also they started to replace more and more of old Windows 8.1 and below GUI with their new fluent design GUI ... which to be honest is worse in my opinion. Well ... enough talking about windows.</p>

<h2>Solus</h2>

<p>In the beginning I decided to go with <a href="https://www.opensuse.org/">open SUSE</a> due to the fact that it was the first linux I had ever seen and used. After only 3 days of pain (KDE 5 Plasma constantly crashing) I switched to Solus.</p>

<p>Just like <q>open SUSE</q>, Solus wasn't based on another big distro, like <q>Ubuntu</q> is based on <q>Debian</q>. One downside was, that I can't use any <q>.rpm</q> or <q>.deb</q> packages (at least not by default). On the other hand we have <a href="https://snapcraft.io/">Snap</a> and <a href="https://flatpak.org/">Flatpak</a> nowadays, which provide a way to easily install software across different linux distributions. Most of the software I needed was available in official Solus repositories, those are quite up-to-date, sadly they are lacking some old and common stuff like <q>xterm</q>, simply because <q>there is no need for it</q>.</p>

<p>I really hate waiting, which is why I am happy that Solus starts up quick, logs you in quick and even shuts down lighting fast.</p>

<p>I actually don't use much operating system features, but neither did I use much operating system features when I was on Windows though.
I just need a minimal OS, which is fast, up-to-date and looks good, Solus satisfies all of those needs in my opinion.</p>

<h3>Budgie</h3>

<p>Solus is available with different desktop environments:</p>

<ul>
<li>Gnome</li>
<li>Mate</li>
<li>Budgie</li>
</ul>

<p>I decided to go for Budgie, simply because it looked minimal and well designed. I also wanted to try something new. Overall I like Budgie.</p>

<p>It comes with some <q>Windows 10</q>-like Notification center, called <q>Raven</q> which also integrates media playback:</p>

<img src="/images/solusbudgiepost/mediaplayback.png" loading="lazy" alt="Media playback raven"/>

<p>and easy access to your audio input and output devices:</p>

<img src="/images/solusbudgiepost/audiocontrol.png" loading="lazy" alt="Audio control"/>

<p>It also supports system tray icons by default, unlike Gnome nowadays.</p>

<p>It has an application menu for listing and grouping installed applications, the <q>Budgie Menu</q>, sadly <a href="https://github.com/solus-project/budgie-desktop/issues/1444">i have experienced heavy problems with said component</a>, which is why I deactivated it and use the <q>run command prompt</q> instead. The <q>run command prompt</q> only allows you to type in a name and execute one of the search results. Back on Windows 10 I only ever used the start menu to do exactly that, so I am not missing out on anything here.</p>

<p>Budgie has some Gnome integration and ships with some of the default gnome tools. I am not the biggest friend of the gnome tooling. As I already mentioned I used KDE for a short while, I really loved it, especially the file manager (<q>Dolphin</q>), which had terminal integration and multi pane support and the terminal (<q>Konsole</q>) which supports horizontal and vertical tiling.</p>

<p>Budige comes with <q>Nautilus</q>, which doesn't support the two features I like about <q>Dolphin</q>, so I ended up deleting <q>Nautilus</q> and am now using <q>Caja</q>, which is a fork of the old <q>Nautilus</q> (back when it still had features). I first tried using Dolphin, but sadly it didn't work that well without the KDE desktop.</p>

<p>I removed <q>gnome-terminal</q> and replaced it with <a href="https://github.com/gnunn1/tilix">Tilix</a>. I went for Tilix due to the fact that it supports tabs, horizontal and vertical tiling and easy customization of keybindings.</p>

<h3>Gaming</h3>

<p>Okay, let's talk about the actually important stuff ... playing games!
I bet you all know, that windows is usually the best choice for gaming, sadly I can't deny that fact.</p>

<p>However, Solus allows easy installation of 32-bit and 64-bit NVIDIA drivers, reducing the initial problems a lot. And by using <a href="https://lutris.net/">Lutris</a>, you can easily install a lot of different Windows-only games.</p>

<p>Lutris can manage games for different platforms:</p>

<ul>
<li>wine</li>
<li>native Linux games</li>
<li>Linux Steam</li>
<li>Windows Steam</li>
<li>Browser</li>
<li>and a couple more</li>
</ul>

<p>allowing you to easily manage your game library using a single application.</p>

<p>You could also manually install the native Steam client via wine, but I would suggest using Lutris if possible, as you’d have to do all the dependency management for the games yourself otherwise and probably you’d even have to create two wine prefixes, one for 64-Bit Steam and one for 32-Bit Steam.</p>

<p>Solus allows you to install the native Steam client via <q>eopkg</q>, its integrated package manger, in addition to that, it also offers <a href="https://github.com/solus-project/linux-steam-integration">improved integration for steam</a>.</p>


<p>Back on windows I played a lot of different games:</p>

<ul>
<li>Dark Souls 2</li>
<li>Dark Souls 3</li>
<li>Dishonored 2</li>
<li>Warframe</li>
<li>Heroes of the Storm</li>
<li>Hearthstone</li>
<li>League of Legends</li>
<li>Brawlhalla</li>
<li>Battlerite</li>
<li>CS:GO</li>
<li>Fortnite</li>
<li>Osu!</li>
<li><em>Insert bunch of indie games here</em></li>
</ul>

<p>Except for some of the indie games and CS:GO, those are all non-linux titles.</p>

<p>It is no problem to run low graphics games like, Brawlhalla, League of Legends or Hearthstone via Wine, but games like Dark Souls, Dishonored or Fortnite aren't playable unless you have very powerful hardware.</p>

<p>Even though I have a GTX 1050 TI, I am unable to play Warframe, Dishonored, Heroes of the Storm or Dark Souls via wine.</p>

<p>Currently, those are the Windows-only games that I got up and running (putting native Linux titles aside):</p>

<ul>
<li>League of Legends</li>
<blockquote>I am using the OpenGL version with low graphic settings, since directX9 causes heavy client bugs</blockquote></li>
<li>Brawlhalla
<blockquote>Has lags sometimes, but runs fine most of the time.</blockquote></li>
<li>Battlerite
<blockquote>Runs fine with directX9</blockquote></li>
<li>Hearthstone
<blockquote>Might not run perfect at all times, but it is a card game, so it doesn’t really matter<blockquote></li>
<li>Osu!
<blockquote>Runs fluid and my Tablet (Huion H420) also works. In order to easily add new songs to the song directory, I use the <q>mv</q> command as my default application for <q>.osz</q> files.</blockquote></li>
</ul>

<p>And those are the ones that I didn’t get to work:</p>

<ul>
<li>Heroes of the Storm
<blockquote>This really surprised me, the game had pretty stable fps of 120+, but the fps dropped to <q>0</q> for a moment, as soon as any character used an ability. Since using abilities is what you do the whole time, the game was simply unplayable.</blockquote></li>
<li>Dark Souls 3
<blockquote>I don’t know why, but the game simply didn’t start, I might investigate this further at some point.</blockquote></li>
<li>Fortnite
<blockquote>Since Fortnite uses BattleEye anti-cheat, which doesn’t work with wine, this game can’t be played.<blockquote></li>
<li>Warframe
<blockquote>Well, it works, but only at unstable 40 fps on minimal settings, which is no fun</blockquote></li>
</ul>

<h3>Conclusion</h3>

<p>I can recommend Solus for daily usage. Most people might not be as picky about their file manager and terminal as I am, so that shouldn't be something that most users would have to mess with.</p>

<p>Probably Solus shouldn’t have been my first choice though, since I obviously preferred the tooling that KDE 5 Plasma gave me, but sadly I had already lost trust in it after seeing how buggy it is on open SUSE Tumbleweed and open SUSE Leap. I didn’t feel like wasting my time to give it a third try.</p>

<hr/>

<p>I have probably just scratched the surface of what might be important to some people, sorry for that.</p>

<p>If you find any mistakes, like wrong information or typos, feel free to submit a pull request.</p>]]></content:encoded>
      <author>Marcel Schramm</author>
      <pubDate>Sun, 27 May 2018 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>